#include "memmap.i65"
#include "dma.i65"
#include "stack.i65"

mainmenu:
  sep #$20 : .as
  rep #$10 : .xl
  lda #$08
  sta window_x
  lda #$09
  sta window_y
  phb
    lda #^menu_enttab_mm
    pha
    plb
    ldx #!menu_enttab_mm
    jsr show_menu
  plb
  rts

; menu_select:
; helper routine to select a list entry
; window and list items must be printed in advance
; used variables:
;
; window_x, window_y, window_w, window_h: for select bar setup
; listsel_max: number of list entries to select from
; listsel_step: spacing between list entries (y text lines)
;
; return value: index of selected item in A
;               or #$FF if no item was selected
menu_select:
  php
  sep #$20 : rep #$10 : .as : .xl
  stz listsel_sel
  bra +
menu_select_noinit:
  php
  sep #$20 : rep #$10 : .as : .xl
+
  lda window_x
  inc
  inc
  sta bar_xl
  lda window_w
  sec
  sbc #$04
  sta bar_wl
  lda listsel_sel
  sta $211b
  stz $211b
  lda listsel_step
  sta $211c
  lda window_y
  clc
  adc $2134
  sta bar_yl

menu_select_loop1
  lda isr_done
  beq menu_select_loop1
  stz isr_done
  jsr printtime
  jsr read_pad
  lda pad_up
  bne menu_select_up
  lda pad_down
  bne menu_select_down
  lda pad_a
  bne menu_select_item
  lda pad_b
  bne menu_select_none
  bra menu_select_loop1
menu_select_up
  lda listsel_sel
  beq menu_select_loop1
  dec listsel_sel
  lda bar_yl
  sec
  sbc listsel_step
  sta bar_yl
  bra menu_select_loop1
menu_select_down
  lda listsel_sel
  inc
  cmp listsel_max
  beq menu_select_loop1
  inc listsel_sel
  lda bar_yl
  clc
  adc listsel_step
  sta bar_yl
  bra menu_select_loop1
menu_select_item
  lda listsel_sel
  bra menu_select_exit
menu_select_none
  lda #$ff
menu_select_exit
  plp
  rts


.byt "SHOW_MENU"
show_menu:
; params:
; x: offset of menu structure
; db: bank of menu structure
; local vars:
#define _work_vars      $0a
#define w_numentries    $00
#define w_max_lbl_len   $02
#define w_max_opt_len   $04
#define w_menu_addr     $06
#define w_menu_bank     $08
  AllocStack()
; backup params
  sep #$20 : .as
  phb
  pla
  sta w_menu_bank
  stx w_menu_addr
  jsr menu_measure      ; determine required window dimensions
  sep #$20 : .as
  lda #$80
  phb
    pha
    plb
    lda w_numentries
    sta $211b
    stz $211b
    lda [w_menu_addr] ; listsel_step from menu structure
    sta $211c
    lda $2134
    sec
    sbc [w_menu_addr] ; listsel_step from menu structure
    inc
    inc
    inc
    sta window_h
    lda w_max_lbl_len
    clc
    adc w_max_opt_len
    adc #$04
    ldx w_max_opt_len
    beq +
    inc
    inc
    inc
+   sta window_w
    jsr push_window
    lda [w_menu_addr]
    sta listsel_step
    stz listsel_sel
    ldy #$0001
    rep #$20 : .al
    lda [w_menu_addr], y
    sta window_taddr
    sep #$20 : .as
    iny
    iny
    lda [w_menu_addr], y
    sta window_tbank
    jsr draw_window
    phb
      lda w_menu_bank
      pha
      plb
      ldx w_menu_addr
      lda w_max_lbl_len
      pha
      jsr menu_print_entries
      pla
    plb
    lda w_numentries
    sta listsel_max
show_menu_loop:
    jsr menu_select_noinit
    cmp #$ff
    beq show_menu_out
    sta $211b
    stz $211b
    lda #11
    sta $211c
    rep #$20 : .al
    lda $2134
    clc
    adc #$04
    tay
    lda [w_menu_addr], y
    and #$00ff
    iny
    iny
    iny
    iny
    cmp #MTYPE_SUBMENU
    beq show_menu_submenu
    cmp #MTYPE_FUNC
    beq show_menu_func
show_menu_cont:
    sep #$20 : .as
;    jsr pop_window
    jmp show_menu_loop
show_menu_out:
    sep #$20 : .as
    jsr pop_window
  plb
  FreeStack()
  rts

show_menu_submenu:
    .al
    lda [w_menu_addr], y
    tax
    sep #$20 : .as
    lda @window_x
    inc
    inc
    sta @window_x
    lda @window_y
    inc
    sta @window_y
    iny
    iny
    lda [w_menu_addr], y
    phb
      pha
      plb
      jsr show_menu
    plb
    bra show_menu_cont

show_menu_func:
    phk
    per show_menu_cont-1
    rep #$20 : .al
    lda [w_menu_addr], y
    tax
    sep #$20 : .as
    iny
    iny
    lda [w_menu_addr], y
    pha
    phx
    rtl
#undef _work_vars

; params:
; x: offset of menu structure
; db: bank of menu structure
; returns:
; number of menu entries
; maximum menu label string length
; maximum menu option string length
.byt "MENU_MEASURE"
menu_measure:
; local variables
#define _work_vars      $02
#define w_max_kv_len    $00
; ==== return variables (same as parameter variables at the caller)
#define r_numentries    $00
#define r_max_lbl_len   $02
#define r_max_opt_len   $04
; ==== WORKING VARIABLES ON STACK ====
  AllocStack()           ; implies PHP : PHD
  stz StackParam(r_max_lbl_len) ; initialize variable
  stz StackParam(r_max_opt_len) ; initialize variable
  stz StackParam(r_numentries)
  stz w_max_kv_len
; ====================================
menu_measure_line_loop:
  lda !$4, x           ; read menu entry type
  and #$00ff           ; (mask)
  beq menu_measure_out ; termination -> exit
  inc StackParam(r_numentries) ; entry counter
  phb
    sep #$20 : .as
    ldy !$5, x         ; resolve pointer to menu entry text
    lda !$7, x
    pha
    plb
    jsr strlen
  plb
  lda !$4, x
  cmp #MTYPE_SUBMENU    ; add 2 chars for '...' on sub menu entries
  bne +
  iny
  iny
+ rep #$20 : .al
  cpy StackParam(r_max_lbl_len); replace max value with
  bmi +                        ; new length
  sty StackParam(r_max_lbl_len); if bigger or equal.
+ jsr menu_meas_opt            ; calculate max option string length
                               ; move to next entry.
  txa
  clc
  adc #11
  tax
  bra menu_measure_line_loop
menu_measure_out:
  FreeStack()
  rts

menu_meas_no_set:
  .as
  lda #$00
  jmp menu_meas_opt_set
menu_meas_opt:
  sep #$20 : .as
  lda !$4, x         ; calculate space needed to show options
  cmp #MTYPE_VALUE   ; only for "value set" entry types
  bne menu_meas_no_set
  lda !$b, x
  beq menu_meas_no_set ; no option
  cmp #$01           ; uint8
  bne menu_meas_opt_02
  lda #$03           ; "0"-"255" - 3 chars
  bra menu_meas_opt_set
menu_meas_opt_02
  cmp #$02           ; uint16
  bne menu_meas_opt_03
  lda #$05           ; "0"-"65535" - 5 chars
  bra menu_meas_opt_set
menu_meas_opt_03
  cmp #$03           ; string (free entry)
  bne menu_meas_opt_04
  lda !$8, x         ; load length constraint
  bra menu_meas_opt_set
menu_meas_opt_04
  cmp #$04           ; key-value (8bit)
  beq menu_meas_opt_keyval
  cmp #$05           ; key-value (16bit)
  beq menu_meas_opt_keyval
  bra menu_meas_opt_06
menu_meas_opt_keyval ; count max value length
  phb
    ldy !$8, x       ; get pointer to
    lda !$a, x       ; key-value table
    pha
    plb
    rep #$20 : .al
menu_meas_opt_nextkey
    lda !$0, y        ; get key
    cmp #$ffff
    beq +
    iny
    iny              ; move to value
    phy
      lda !$0, y     ; get pointer to string
      tay
      jsr strlen     ; get length
      cpy w_max_kv_len ; compare-replace
      bmi menu_meas_opt_keyval_skip
      sty w_max_kv_len
menu_meas_opt_keyval_skip
    ply
    iny              ; move to next key
    iny
    bra menu_meas_opt_nextkey
+
  plb
  lda w_max_kv_len
  bra menu_meas_opt_set
menu_meas_opt_06      ; file select (16 characters)
  lda #$10
  bra menu_meas_opt_set
menu_meas_opt_set
  cmp StackParam(r_max_opt_len)
  bmi +
  sta StackParam(r_max_opt_len)
+ rep #$20 : .al
  rts
#undef _work_vars

.byt "MENU_PRINT_ENTRIES"
menu_print_entries:
#define _work_vars      $00
; params
; x: address of menu entry structure
; db: bank of menu entry structure
#define p_max_lbl_len   $00
  AllocStack()
  sep #$20 : .as
  lda @window_y
  inc
  inc
  sta @print_y
  lda @window_w
  sta @print_count
menu_print_ent_loop:
  lda @window_x
  inc
  inc
  sta @print_x
  lda !4, x
  bne +
  jmp menu_print_ent_out
+ lda !5, x
  sta @print_src
  lda !6, x
  sta @print_src+1
  lda !7, x
  sta @print_bank
  lda #$00
  sta @print_pal
  phx
  jsr hiprint
  plx
  lda !4, x
  cmp #MTYPE_SUBMENU
  bne +
  lda @print_done
  adc @print_x
  dec
  sta @print_x
  lda #<text_ellipse
  sta @print_src
  lda #>text_ellipse
  sta @print_src+1
  lda #^text_ellipse
  sta @print_bank
  phx
  jsr hiprint
  plx
+ lda StackParam(p_max_lbl_len)
  clc
  adc @window_x
  adc #$05
  sta @print_x
  jsr menu_print_opt_string
  rep #$20 : .al
  txa
  clc
  adc #11
  tax
  sep #$20 : .as
  lda @print_y
  clc
  adc @listsel_step
  sta @print_y
  jmp menu_print_ent_loop
menu_print_ent_out:
  FreeStack()
  rts
#undef _work_vars

.byt "MENU_PRINT_OPT_STRING"
menu_print_opt_string_none:
  jmp menu_print_opt_string_out
menu_print_opt_string:
; params
; x: address of menu entry structure
; db: bank of menu entry structure
#define _work_vars   $03
#define w_entry_addr $00
#define w_entry_bank $02
  AllocStack()
  rep #$20 : .al
  lda !$c, x
  sta w_entry_addr
  lda #!stringbuf
  sta @print_src
  sep #$20 : .as
  lda #$02
  sta @print_pal
  lda #^stringbuf
  sta @print_bank
  lda !$e, x
  sta w_entry_bank
  lda !$4, x
  cmp #MTYPE_VALUE
  bne menu_print_opt_string_none
  lda !$b, x
  beq menu_print_opt_string_none
  cmp #$01
  bne menu_print_opt_string_02
  rep #$20 : .al
  lda [w_entry_addr]
  and #$00ff
  phx
  jsr bin2dec16
  lda @print_src
  inc
  inc
  sta @print_src
  jsr hiprint
  plx
  jmp menu_print_opt_string_out
menu_print_opt_string_02:
  .as
  cmp #$02
  bne menu_print_opt_string_03
  rep #$20 : .al
  lda [w_entry_addr]
  phx
  jsr bin2dec16
  jsr hiprint
  plx
  jmp menu_print_opt_string_out
menu_print_opt_string_03:
  .as
  cmp #$03
  bne menu_print_opt_string_04
menu_print_opt_string_04:
  .as
  cmp #$04
  beq menu_print_opt_string_keyval
  cmp #$05
  beq menu_print_opt_string_keyval
  bra menu_print_opt_string_06
menu_print_opt_string_keyval:
menu_print_opt_string_06:
  sep #$20 : .as
  lda #$41
  sta @stringbuf
  lda #$00
  sta @stringbuf+1
  lda #^stringbuf
  sta @print_bank
  lda #$02
  sta @print_pal
  rep #$20 : .al
  lda #!stringbuf
  sta @print_src
  phx
  jsr hiprint
  plx
menu_print_opt_string_out:
  FreeStack()
  rts
