#include "memmap.i65"

; *=$2BF0
nmihook:
  jsr !BRAM_PAYLOAD
  jmp $ffff
irqhook:
  jsr !BRAM_PAYLOAD
  jmp $ffff

; *=$2A04
nmi_payload:
  php
  rep #$30 : .al : .xl
  phb
  pha
  phx
  phy
  phk
  plb
  phd
  lda #$2b00
  tcd
; backup vectors
  sep #$20 : .as
  lda #$01
  sta <NMI_VECT_DISABLE ; disable vector patching
; fill in jump addresses above ("$ffff")
  ldx $ffea
  stx <NMI_VECT_ORIG
  ldx $ffee
  stx <IRQ_VECT_ORIG
  stz <NMI_VECT_DISABLE
; only read controller every couple of frames
  clc
  ror <NMI_RUNMASK
  bcc nmi_patches
  ror <NMI_RUNMASK
; read controller
  lda <MIRROR_4200
  lsr
; auto read is active, so we wait for it to finish and use the result
  bcs nmi_autoread
; no auto read; read the controller manually
  stz $4016
  lda #$11
  sta $4016
  dec
  sta $4016
  ldx #$0008
- lda $4016
  ror
  rol <NMI_PAD
  dex
  bne -
  ldx #$0008
- lda $4016
  ror
  rol <NMI_PAD+1
  dex
  bne -
; check button combinations
; L+R+Start+Select : $3030
; L+R+Select+X     : $2070
; L+R+Start+A      : $10b0
; L+R+Start+B      : $9030
; L+R+Start+Y      : $5030
; L+R+Start+X      : $1070
  bra nmi_pad_loop
nmi_autoread:
- lda $4212
  lsr
  bcs -
  ldy $4218
  sty <NMI_PAD
  ldx #$0000
nmi_pad_loop:
  ldy <NMI_PAD_BUTTONS, x
  cpy <NMI_PAD
  beq nmi_pad_found
  cpx #$000a
  beq nmi_patches
  inx
  inx
  bra nmi_pad_loop
nmi_pad_found:
  txa
  lsr
  ora #$80
  sta !MCU_CMD
  cmp #$83
  beq nmi_disable_wram
  cmp #$82
  bne nmi_patches
nmi_enable_wram:
  lda #$00
nmi_disable_wram:
  sta <NMI_WRAM_PATCH_DISABLE
nmi_patches:
; WRAM patches
; maybe make this speedcode after switching to ca65
; snescom can't handle relocation
; skip WRAM patching if disabled
  lda <NMI_WRAM_PATCH_DISABLE
  bne nmi_exit
; skip WRAM patching if there are no cheats
  sep #$10 : .xs
  ldy <NMI_WRAM_PATCH_COUNT
  beq nmi_exit
- lda <NMI_WRAM_PATCH_BASE_BANK, x
  pha
  plb
  lda <NMI_WRAM_PATCH_BASE_VALUE, x
  sta (<NMI_WRAM_PATCH_BASE_ADDR, x)
  inx
  inx
  inx
  inx
  dey
  bne -
nmi_exit:
; clean up
  pld
  rep #$30 : .al : .xl
  ply
  plx
  pla
  plb
  plp
  rts
.byt "bram_end"
