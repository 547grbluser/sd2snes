#include "memmap.i65"

nmihook:
  jsr !BRAM_PAYLOAD
  jmp $ffff
irqhook:
  jsr !BRAM_PAYLOAD
  jmp $ffff
nmi_payload:
  php
  rep #$30 : .al : .xl
  phb
  pha
  phx
  phy
  phk
  plb
  phd
  lda #$2a00
  tcd
; backup vectors
+ sep #$10 : .xs
  ldx #$01
  stx $bd ; disable vector patching
; fill in jump addresses above ("$ffff")
  lda $ffea
  sta $16
  lda $ffee
  sta $1c
  dex
  stx $bd
; only read controller every couple of frames
  ror $bc
  bcc nmi_patches
  lda #$80
  tsb $bc
; read controller
  lda $4212
  lsr
; auto read is active, so we wait for it to finish and use the result
  bcs nmi_autoread
; no auto read; read the controller manually
  stz $4016
  ldx #$11
  stx $4016
  dex
  stx $4016
- ldy $4016
  tya
  ror
  rol $04
  dex
  bne -
; check button combinations
; L+R+Start+Select : $3030
; L+R+Select+X     : $2070
; L+R+Start+A      : $10b0
; L+R+Start+B      : $9030
; L+R+Start+Y      : $5030
; L+R+Start+X      : $1070
  ldx #$00
  bra nmi_pad_loop
nmi_autoread:
  sep #$20 : .as
- lda $4212
  lsr
  bcs -
  rep #$20 : .al
  lda $4218
  sta $04
nmi_pad_loop:
  lda $06, x
  cmp $04
  beq nmi_pad_found
  cpx #$0a
  beq nmi_patches
  inx
  inx
  bra nmi_pad_loop
nmi_pad_found:
  txa
  lsr
  ora #$80
  tax
  stx <MCU_CMD
  cpx #$83
  beq nmi_disable_wram
  cpx #$82
  bne nmi_patches
nmi_enable_wram:
  ldx #$00
nmi_disable_wram:
  stx $be
nmi_patches:
; WRAM patches
; maybe make this speedcode after switching to ca65
; snescom can't handle relocation
; skip WRAM patching if disabled
  ldx $be
  bne nmi_exit
; skip WRAM patching if there are no cheats
  ldy $bf
  beq nmi_exit
  sep #$20 : .as
- lda $c2, x
  pha
  plb
  lda $c3, x
  sta ($c0, x)
  inx
  inx
  inx
  inx
  dey
  bne -
nmi_exit:
; clean up
  pld
  rep #$30 : .al : .xl
  ply
  plx
  pla
  plb
  plp
  rts
.byt"bram_end"
